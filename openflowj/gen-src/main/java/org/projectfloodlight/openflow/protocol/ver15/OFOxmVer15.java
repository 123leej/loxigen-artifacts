// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_virtual_class.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import io.netty.buffer.ByteBuf;

abstract class OFOxmVer15 {
    // version: 1.5
    final static byte WIRE_VERSION = 6;
    final static int MINIMUM_LENGTH = 4;


    public final static OFOxmVer15.Reader READER = new Reader();

    static class Reader implements OFMessageReader<OFOxm<?>> {
        @Override
        public OFOxm<?> readFrom(ByteBuf bb) throws OFParseError {
            if(bb.readableBytes() < MINIMUM_LENGTH)
                return null;
            int start = bb.readerIndex();
            int typeLen = bb.readInt();
            bb.readerIndex(start);
            switch(typeLen) {
               case (int) 0x80002a02:
                   // discriminator value 0x80002a02L=0x80002a02L for class OFOxmArpOpVer15
                   return OFOxmArpOpVer15.READER.readFrom(bb);
               case (int) 0x80002b04:
                   // discriminator value 0x80002b04L=0x80002b04L for class OFOxmArpOpMaskedVer15
                   return OFOxmArpOpMaskedVer15.READER.readFrom(bb);
               case (int) 0x80003006:
                   // discriminator value 0x80003006L=0x80003006L for class OFOxmArpShaVer15
                   return OFOxmArpShaVer15.READER.readFrom(bb);
               case (int) 0x8000310c:
                   // discriminator value 0x8000310cL=0x8000310cL for class OFOxmArpShaMaskedVer15
                   return OFOxmArpShaMaskedVer15.READER.readFrom(bb);
               case (int) 0x80002c04:
                   // discriminator value 0x80002c04L=0x80002c04L for class OFOxmArpSpaVer15
                   return OFOxmArpSpaVer15.READER.readFrom(bb);
               case (int) 0x80002d08:
                   // discriminator value 0x80002d08L=0x80002d08L for class OFOxmArpSpaMaskedVer15
                   return OFOxmArpSpaMaskedVer15.READER.readFrom(bb);
               case (int) 0x80003206:
                   // discriminator value 0x80003206L=0x80003206L for class OFOxmArpThaVer15
                   return OFOxmArpThaVer15.READER.readFrom(bb);
               case (int) 0x8000330c:
                   // discriminator value 0x8000330cL=0x8000330cL for class OFOxmArpThaMaskedVer15
                   return OFOxmArpThaMaskedVer15.READER.readFrom(bb);
               case (int) 0x80002e04:
                   // discriminator value 0x80002e04L=0x80002e04L for class OFOxmArpTpaVer15
                   return OFOxmArpTpaVer15.READER.readFrom(bb);
               case (int) 0x80002f08:
                   // discriminator value 0x80002f08L=0x80002f08L for class OFOxmArpTpaMaskedVer15
                   return OFOxmArpTpaMaskedVer15.READER.readFrom(bb);
               case (int) 0x80000606:
                   // discriminator value 0x80000606L=0x80000606L for class OFOxmEthDstVer15
                   return OFOxmEthDstVer15.READER.readFrom(bb);
               case (int) 0x8000070c:
                   // discriminator value 0x8000070cL=0x8000070cL for class OFOxmEthDstMaskedVer15
                   return OFOxmEthDstMaskedVer15.READER.readFrom(bb);
               case (int) 0x80000806:
                   // discriminator value 0x80000806L=0x80000806L for class OFOxmEthSrcVer15
                   return OFOxmEthSrcVer15.READER.readFrom(bb);
               case (int) 0x8000090c:
                   // discriminator value 0x8000090cL=0x8000090cL for class OFOxmEthSrcMaskedVer15
                   return OFOxmEthSrcMaskedVer15.READER.readFrom(bb);
               case (int) 0x80000a02:
                   // discriminator value 0x80000a02L=0x80000a02L for class OFOxmEthTypeVer15
                   return OFOxmEthTypeVer15.READER.readFrom(bb);
               case (int) 0x80000b04:
                   // discriminator value 0x80000b04L=0x80000b04L for class OFOxmEthTypeMaskedVer15
                   return OFOxmEthTypeMaskedVer15.READER.readFrom(bb);
               case (int) 0x80002801:
                   // discriminator value 0x80002801L=0x80002801L for class OFOxmIcmpv4CodeVer15
                   return OFOxmIcmpv4CodeVer15.READER.readFrom(bb);
               case (int) 0x80002902:
                   // discriminator value 0x80002902L=0x80002902L for class OFOxmIcmpv4CodeMaskedVer15
                   return OFOxmIcmpv4CodeMaskedVer15.READER.readFrom(bb);
               case (int) 0x80002601:
                   // discriminator value 0x80002601L=0x80002601L for class OFOxmIcmpv4TypeVer15
                   return OFOxmIcmpv4TypeVer15.READER.readFrom(bb);
               case (int) 0x80002702:
                   // discriminator value 0x80002702L=0x80002702L for class OFOxmIcmpv4TypeMaskedVer15
                   return OFOxmIcmpv4TypeMaskedVer15.READER.readFrom(bb);
               case (int) 0x80003c01:
                   // discriminator value 0x80003c01L=0x80003c01L for class OFOxmIcmpv6CodeVer15
                   return OFOxmIcmpv6CodeVer15.READER.readFrom(bb);
               case (int) 0x80003d02:
                   // discriminator value 0x80003d02L=0x80003d02L for class OFOxmIcmpv6CodeMaskedVer15
                   return OFOxmIcmpv6CodeMaskedVer15.READER.readFrom(bb);
               case (int) 0x80003a01:
                   // discriminator value 0x80003a01L=0x80003a01L for class OFOxmIcmpv6TypeVer15
                   return OFOxmIcmpv6TypeVer15.READER.readFrom(bb);
               case (int) 0x80003b02:
                   // discriminator value 0x80003b02L=0x80003b02L for class OFOxmIcmpv6TypeMaskedVer15
                   return OFOxmIcmpv6TypeMaskedVer15.READER.readFrom(bb);
               case (int) 0x80000204:
                   // discriminator value 0x80000204L=0x80000204L for class OFOxmInPhyPortVer15
                   return OFOxmInPhyPortVer15.READER.readFrom(bb);
               case (int) 0x80000308:
                   // discriminator value 0x80000308L=0x80000308L for class OFOxmInPhyPortMaskedVer15
                   return OFOxmInPhyPortMaskedVer15.READER.readFrom(bb);
               case (int) 0x80000004:
                   // discriminator value 0x80000004L=0x80000004L for class OFOxmInPortVer15
                   return OFOxmInPortVer15.READER.readFrom(bb);
               case (int) 0x80000108:
                   // discriminator value 0x80000108L=0x80000108L for class OFOxmInPortMaskedVer15
                   return OFOxmInPortMaskedVer15.READER.readFrom(bb);
               case (int) 0x80001001:
                   // discriminator value 0x80001001L=0x80001001L for class OFOxmIpDscpVer15
                   return OFOxmIpDscpVer15.READER.readFrom(bb);
               case (int) 0x80001102:
                   // discriminator value 0x80001102L=0x80001102L for class OFOxmIpDscpMaskedVer15
                   return OFOxmIpDscpMaskedVer15.READER.readFrom(bb);
               case (int) 0x80001201:
                   // discriminator value 0x80001201L=0x80001201L for class OFOxmIpEcnVer15
                   return OFOxmIpEcnVer15.READER.readFrom(bb);
               case (int) 0x80001302:
                   // discriminator value 0x80001302L=0x80001302L for class OFOxmIpEcnMaskedVer15
                   return OFOxmIpEcnMaskedVer15.READER.readFrom(bb);
               case (int) 0x80001401:
                   // discriminator value 0x80001401L=0x80001401L for class OFOxmIpProtoVer15
                   return OFOxmIpProtoVer15.READER.readFrom(bb);
               case (int) 0x80001502:
                   // discriminator value 0x80001502L=0x80001502L for class OFOxmIpProtoMaskedVer15
                   return OFOxmIpProtoMaskedVer15.READER.readFrom(bb);
               case (int) 0x80001804:
                   // discriminator value 0x80001804L=0x80001804L for class OFOxmIpv4DstVer15
                   return OFOxmIpv4DstVer15.READER.readFrom(bb);
               case (int) 0x80001908:
                   // discriminator value 0x80001908L=0x80001908L for class OFOxmIpv4DstMaskedVer15
                   return OFOxmIpv4DstMaskedVer15.READER.readFrom(bb);
               case (int) 0x80001604:
                   // discriminator value 0x80001604L=0x80001604L for class OFOxmIpv4SrcVer15
                   return OFOxmIpv4SrcVer15.READER.readFrom(bb);
               case (int) 0x80001708:
                   // discriminator value 0x80001708L=0x80001708L for class OFOxmIpv4SrcMaskedVer15
                   return OFOxmIpv4SrcMaskedVer15.READER.readFrom(bb);
               case (int) 0x80003610:
                   // discriminator value 0x80003610L=0x80003610L for class OFOxmIpv6DstVer15
                   return OFOxmIpv6DstVer15.READER.readFrom(bb);
               case (int) 0x80003720:
                   // discriminator value 0x80003720L=0x80003720L for class OFOxmIpv6DstMaskedVer15
                   return OFOxmIpv6DstMaskedVer15.READER.readFrom(bb);
               case (int) 0x80003804:
                   // discriminator value 0x80003804L=0x80003804L for class OFOxmIpv6FlabelVer15
                   return OFOxmIpv6FlabelVer15.READER.readFrom(bb);
               case (int) 0x80003908:
                   // discriminator value 0x80003908L=0x80003908L for class OFOxmIpv6FlabelMaskedVer15
                   return OFOxmIpv6FlabelMaskedVer15.READER.readFrom(bb);
               case (int) 0x80004006:
                   // discriminator value 0x80004006L=0x80004006L for class OFOxmIpv6NdSllVer15
                   return OFOxmIpv6NdSllVer15.READER.readFrom(bb);
               case (int) 0x8000410c:
                   // discriminator value 0x8000410cL=0x8000410cL for class OFOxmIpv6NdSllMaskedVer15
                   return OFOxmIpv6NdSllMaskedVer15.READER.readFrom(bb);
               case (int) 0x80003e10:
                   // discriminator value 0x80003e10L=0x80003e10L for class OFOxmIpv6NdTargetVer15
                   return OFOxmIpv6NdTargetVer15.READER.readFrom(bb);
               case (int) 0x80003f20:
                   // discriminator value 0x80003f20L=0x80003f20L for class OFOxmIpv6NdTargetMaskedVer15
                   return OFOxmIpv6NdTargetMaskedVer15.READER.readFrom(bb);
               case (int) 0x80004206:
                   // discriminator value 0x80004206L=0x80004206L for class OFOxmIpv6NdTllVer15
                   return OFOxmIpv6NdTllVer15.READER.readFrom(bb);
               case (int) 0x8000430c:
                   // discriminator value 0x8000430cL=0x8000430cL for class OFOxmIpv6NdTllMaskedVer15
                   return OFOxmIpv6NdTllMaskedVer15.READER.readFrom(bb);
               case (int) 0x80003410:
                   // discriminator value 0x80003410L=0x80003410L for class OFOxmIpv6SrcVer15
                   return OFOxmIpv6SrcVer15.READER.readFrom(bb);
               case (int) 0x80003520:
                   // discriminator value 0x80003520L=0x80003520L for class OFOxmIpv6SrcMaskedVer15
                   return OFOxmIpv6SrcMaskedVer15.READER.readFrom(bb);
               case (int) 0x80000408:
                   // discriminator value 0x80000408L=0x80000408L for class OFOxmMetadataVer15
                   return OFOxmMetadataVer15.READER.readFrom(bb);
               case (int) 0x80000510:
                   // discriminator value 0x80000510L=0x80000510L for class OFOxmMetadataMaskedVer15
                   return OFOxmMetadataMaskedVer15.READER.readFrom(bb);
               case (int) 0x80004404:
                   // discriminator value 0x80004404L=0x80004404L for class OFOxmMplsLabelVer15
                   return OFOxmMplsLabelVer15.READER.readFrom(bb);
               case (int) 0x80004508:
                   // discriminator value 0x80004508L=0x80004508L for class OFOxmMplsLabelMaskedVer15
                   return OFOxmMplsLabelMaskedVer15.READER.readFrom(bb);
               case (int) 0x80004601:
                   // discriminator value 0x80004601L=0x80004601L for class OFOxmMplsTcVer15
                   return OFOxmMplsTcVer15.READER.readFrom(bb);
               case (int) 0x80004702:
                   // discriminator value 0x80004702L=0x80004702L for class OFOxmMplsTcMaskedVer15
                   return OFOxmMplsTcMaskedVer15.READER.readFrom(bb);
               case (int) 0x80002402:
                   // discriminator value 0x80002402L=0x80002402L for class OFOxmSctpDstVer15
                   return OFOxmSctpDstVer15.READER.readFrom(bb);
               case (int) 0x80002504:
                   // discriminator value 0x80002504L=0x80002504L for class OFOxmSctpDstMaskedVer15
                   return OFOxmSctpDstMaskedVer15.READER.readFrom(bb);
               case (int) 0x80002202:
                   // discriminator value 0x80002202L=0x80002202L for class OFOxmSctpSrcVer15
                   return OFOxmSctpSrcVer15.READER.readFrom(bb);
               case (int) 0x80002304:
                   // discriminator value 0x80002304L=0x80002304L for class OFOxmSctpSrcMaskedVer15
                   return OFOxmSctpSrcMaskedVer15.READER.readFrom(bb);
               case (int) 0x80001c02:
                   // discriminator value 0x80001c02L=0x80001c02L for class OFOxmTcpDstVer15
                   return OFOxmTcpDstVer15.READER.readFrom(bb);
               case (int) 0x80001d04:
                   // discriminator value 0x80001d04L=0x80001d04L for class OFOxmTcpDstMaskedVer15
                   return OFOxmTcpDstMaskedVer15.READER.readFrom(bb);
               case (int) 0x80001a02:
                   // discriminator value 0x80001a02L=0x80001a02L for class OFOxmTcpSrcVer15
                   return OFOxmTcpSrcVer15.READER.readFrom(bb);
               case (int) 0x80001b04:
                   // discriminator value 0x80001b04L=0x80001b04L for class OFOxmTcpSrcMaskedVer15
                   return OFOxmTcpSrcMaskedVer15.READER.readFrom(bb);
               case 0x14004:
                   // discriminator value 0x14004L=0x14004L for class OFOxmTunnelIpv4DstVer15
                   return OFOxmTunnelIpv4DstVer15.READER.readFrom(bb);
               case 0x14108:
                   // discriminator value 0x14108L=0x14108L for class OFOxmTunnelIpv4DstMaskedVer15
                   return OFOxmTunnelIpv4DstMaskedVer15.READER.readFrom(bb);
               case 0x13e04:
                   // discriminator value 0x13e04L=0x13e04L for class OFOxmTunnelIpv4SrcVer15
                   return OFOxmTunnelIpv4SrcVer15.READER.readFrom(bb);
               case 0x13f08:
                   // discriminator value 0x13f08L=0x13f08L for class OFOxmTunnelIpv4SrcMaskedVer15
                   return OFOxmTunnelIpv4SrcMaskedVer15.READER.readFrom(bb);
               case (int) 0x80002002:
                   // discriminator value 0x80002002L=0x80002002L for class OFOxmUdpDstVer15
                   return OFOxmUdpDstVer15.READER.readFrom(bb);
               case (int) 0x80002104:
                   // discriminator value 0x80002104L=0x80002104L for class OFOxmUdpDstMaskedVer15
                   return OFOxmUdpDstMaskedVer15.READER.readFrom(bb);
               case (int) 0x80001e02:
                   // discriminator value 0x80001e02L=0x80001e02L for class OFOxmUdpSrcVer15
                   return OFOxmUdpSrcVer15.READER.readFrom(bb);
               case (int) 0x80001f04:
                   // discriminator value 0x80001f04L=0x80001f04L for class OFOxmUdpSrcMaskedVer15
                   return OFOxmUdpSrcMaskedVer15.READER.readFrom(bb);
               case (int) 0x80000e01:
                   // discriminator value 0x80000e01L=0x80000e01L for class OFOxmVlanPcpVer15
                   return OFOxmVlanPcpVer15.READER.readFrom(bb);
               case (int) 0x80000f02:
                   // discriminator value 0x80000f02L=0x80000f02L for class OFOxmVlanPcpMaskedVer15
                   return OFOxmVlanPcpMaskedVer15.READER.readFrom(bb);
               case (int) 0x80000c02:
                   // discriminator value 0x80000c02L=0x80000c02L for class OFOxmVlanVidVer15
                   return OFOxmVlanVidVer15.READER.readFrom(bb);
               case (int) 0x80000d04:
                   // discriminator value 0x80000d04L=0x80000d04L for class OFOxmVlanVidMaskedVer15
                   return OFOxmVlanVidMaskedVer15.READER.readFrom(bb);
               case (int) 0x80004e02:
                   // discriminator value 0x80004e02L=0x80004e02L for class OFOxmIpv6ExthdrVer15
                   return OFOxmIpv6ExthdrVer15.READER.readFrom(bb);
               case (int) 0x80004f04:
                   // discriminator value 0x80004f04L=0x80004f04L for class OFOxmIpv6ExthdrMaskedVer15
                   return OFOxmIpv6ExthdrMaskedVer15.READER.readFrom(bb);
               case (int) 0x80004801:
                   // discriminator value 0x80004801L=0x80004801L for class OFOxmMplsBosVer15
                   return OFOxmMplsBosVer15.READER.readFrom(bb);
               case (int) 0x80004902:
                   // discriminator value 0x80004902L=0x80004902L for class OFOxmMplsBosMaskedVer15
                   return OFOxmMplsBosMaskedVer15.READER.readFrom(bb);
               case (int) 0x80004c08:
                   // discriminator value 0x80004c08L=0x80004c08L for class OFOxmTunnelIdVer15
                   return OFOxmTunnelIdVer15.READER.readFrom(bb);
               case (int) 0x80004d10:
                   // discriminator value 0x80004d10L=0x80004d10L for class OFOxmTunnelIdMaskedVer15
                   return OFOxmTunnelIdMaskedVer15.READER.readFrom(bb);
               case (int) 0x80005201:
                   // discriminator value 0x80005201L=0x80005201L for class OFOxmPbbUcaVer15
                   return OFOxmPbbUcaVer15.READER.readFrom(bb);
               case (int) 0x80005302:
                   // discriminator value 0x80005302L=0x80005302L for class OFOxmPbbUcaMaskedVer15
                   return OFOxmPbbUcaMaskedVer15.READER.readFrom(bb);
               case (int) 0x80005604:
                   // discriminator value 0x80005604L=0x80005604L for class OFOxmActsetOutputVer15
                   return OFOxmActsetOutputVer15.READER.readFrom(bb);
               case (int) 0x80005708:
                   // discriminator value 0x80005708L=0x80005708L for class OFOxmActsetOutputMaskedVer15
                   return OFOxmActsetOutputMaskedVer15.READER.readFrom(bb);
               case (int) 0x80005804:
                   // discriminator value 0x80005804L=0x80005804L for class OFOxmPacketTypeVer15
                   return OFOxmPacketTypeVer15.READER.readFrom(bb);
               case (int) 0x80005908:
                   // discriminator value 0x80005908L=0x80005908L for class OFOxmPacketTypeMaskedVer15
                   return OFOxmPacketTypeMaskedVer15.READER.readFrom(bb);
               case (int) 0x80005402:
                   // discriminator value 0x80005402L=0x80005402L for class OFOxmTcpFlagsVer15
                   return OFOxmTcpFlagsVer15.READER.readFrom(bb);
               case (int) 0x80005504:
                   // discriminator value 0x80005504L=0x80005504L for class OFOxmTcpFlagsMaskedVer15
                   return OFOxmTcpFlagsMaskedVer15.READER.readFrom(bb);
               default:
                   throw new OFParseError("Unknown value for discriminator typeLen of class OFOxmVer15: " + typeLen);
            }
        }
    }
}
